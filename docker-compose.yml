version: '3.8'

services:
  admin-ui:
    build:
      context: ./admin-ui
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./admin-ui:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
    depends_on:
      - server
    networks:
      - app-network

  server:
    build:
      context: ./server
      dockerfile: Dockerfile
      args:
        NPM_LOG_LEVEL: notice
    ports:
      - ${PORT}:3000
    environment:
      BCRYPT_SALT: ${BCRYPT_SALT}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      JWT_EXPIRATION: ${JWT_EXPIRATION}
      DB_URL: postgres://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
    depends_on:
      - migrate
    networks:
      - app-network

  migrate:
    build:
      context: ./server
      dockerfile: Dockerfile
      args:
        NPM_LOG_LEVEL: notice
    command: npm run db:init
    working_dir: /app
    environment:
      BCRYPT_SALT: ${BCRYPT_SALT}
      DB_URL: postgres://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network

  db:
    image: postgres:12
    ports:
      - ${DB_PORT}:5432
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres:/var/lib/postgresql/data
    healthcheck:
      test:
        - CMD-SHELL
        - pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}
      timeout: 45s
      interval: 10s
      retries: 10
    networks:
      - app-network

volumes:
  postgres:

networks:
  app-network:
    driver: bridge
